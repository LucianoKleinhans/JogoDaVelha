#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('20220503:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Integrating Socket.IO
const { Server } = require("socket.io");
const io = new Server(server);

// var vez = 1;
var player = 1;
io.on('connection', (socket) => {
  console.log('Player ' + player + ' conectou!');
  socket.emit('user', player);
  socket.on('id', (element) => {
    socket.broadcast.emit('casaSelecionada',{casaSelecionada: element.vencedorJogo});
    socket.emit('casaSelecionada',{casaSelecionada: element.vencedorJogo})
    if (element.user <= 2) {
      console.log('Casa Selecionada: ' + element.casa + ' - USER :' + element.user);
      socket.broadcast.emit('casaSelecionada', { casaSelecionada: element.casa, user: element.user });
      socket.emit('casaSelecionada', { casaSelecionada: element.casa, user: element.user });
    }
  });
  if (player < 2) {
    player++;
  } else {
    console.log('Limite de Jogadores Atingido!');
    player = 1;
  }
});


/**
* Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
